cls
 # Get-Date -Format 'yyyyMMddHHmmss' >C:\backups\TIMETXT.txt

        $return=@()
        
        $servercon = New-Object System.Data.SqlClient.SqlConnection
        $servercon.ConnectionString = "Data Source=servername;Initial Catalog=master;Integrated Security=true;"
        $servercmd = New-Object System.Data.SqlClient.SqlCommand
        $servercmd.Connection = $servercon
        #$servercmd.CommandText = "SELECT top 10 InstanceName FROM DBA.dbo.view_SQLServerInstances where Environment ='QA' AND State = 'Running'"
        $servercmd.CommandText = "SELECT distinct  vw.[InstanceName] FROM [DBA].[dbo].[view_SQLServerInstances] vw
                                  where vw.Started ='True'	
                                  AND vw.[StartMode] !='Disabled'
                                  AND vw.State ='Running'
                                  --and vw.Environment='PROD'
                                  --AND vw.[InstanceName] ='SWBC-DMCPI'
                                  and vw.ServerName not  in  (
                                                   SELECT   dc.[Decom_servers]
                                                  FROM [DBAutil].[dbo].[Decommission_server_List] dc)
                                                  Order by  vw.[InstanceName];
                               "
        $servercmd.CommandTimeout = 0
        
      # Write-Warning $servercmd.CommandText
        try
        {
            $servercon.Open()
       
                $read = $servercmd.ExecuteReader()
    
            while ($read.Read())
            {
                $dbserver = $read["InstanceName"]
                 
              Write-Host  $dbserver  # you can comment if you schedule this 

             
               $sqlcmd= "select @@servername as Servername,create_date, getdate() as checking_date from sys.databases where name = 'tempdb'"
               #$sqlcmd ="select @@servername as Servername,crdate as create_date, getdate() as checking_date from master.dbo.sysdatabases where name = 'tempdb'"
                #Invoke-Sqlcmd -ServerInstance $instance -Database tempdb -Query $sqlcmd -ErrorAction Stop -ConnectionTimeout 2



                  try{
                  $row = New-Object -TypeName Psobject -Property @{'InstanceName'=$dbserver; 'Startuptime' = $null;check_date=$null}
                  $check = Invoke-Sqlcmd -ServerInstance $dbserver -Database tempdb -Query $sqlcmd -ErrorAction Stop -ConnectionTimeout 0
                  $row.instancename =$check.Servername
                  $row.startuptime = $check.create_date
                  $row.check_date = $check.checking_date

                  }
                  catch {
                  # do nothing
                      try{
                      $sqlcmd ="select @@servername as Servername,crdate as create_date, getdate() as checking_date from master.dbo.sysdatabases where name = 'tempdb'"
                      $row = New-Object -TypeName Psobject -Property @{'InstanceName'=$dbserver; 'Startuptime' = $null;check_date=$null}
                      $check = Invoke-Sqlcmd -ServerInstance $dbserver -Database tempdb -Query $sqlcmd -ErrorAction Stop -ConnectionTimeout 0
                      $row.instancename =$check.Servername
                      $row.startuptime = $check.create_date
                      $row.check_date = $check.checking_date
                  
                      }
                      catch {
                       # do nothing
                       $ps= New-PSSession -ComputerName  "xxxxxxxx"
                       Enter-PSSession -session $ps
                        $dbserver ="servername\GLOBALSCAPE"
                        $sqlcmd= "select @@servername as Servername,create_date, getdate() as checking_date from sys.databases where name = 'tempdb'"
                      $check = Invoke-Sqlcmd -ServerInstance $dbserver -Database tempdb -Query $sqlcmd -ErrorAction Stop -ConnectionTimeout 0
                      $row.instancename =$check.Servername
                      $row.startuptime = $check.create_date
                      $row.check_date = $check.checking_date
                       Exist-PSSession  $ps
                       
                       Write-Warning " server $dbserver  "
                        continue
                       }
                   
                  }
                  finally {
                  $return+= $row 
                  }

              }
        }
        catch
        {
            Write-Warning "Read-Servers Error " #>>"D:\Replication_MAP\Error_log_SQL_JOBNew.txt"
             $ex = $_.Exception 
           Write-Error "$ex.Message" 
           continue 
           # Write-Warning $_
        }
        finally {
    [string[]]$body = $null
    if($return){
        $body += $($return|Select-Object 'InstanceName','startuptime','check_date' | ConvertTo-HTML | foreach {if($_ -like "<title>*</title>"){'<style>table{color:black;text-align:left;font-size:12px;border:2px solid black;border-collapse: collapse;}th{background-color:cornflowerblue;border:2px solid black;padding:5px;}td{border-right:2px solid black;padding:5px;border-top: 1px solid black;}</style>'}else{$_}})
       
           
        $fromaddress = "fkassa@abc.com" 
        $toaddress = "fkassa@abc.com"  
        $Subject = "Server Min and Max Memory Configuration" 
        $smtpserver = "smtp.abc.local" 
 
        #################################### 
 
        $message = new-object System.Net.Mail.MailMessage 
        $message.From = $fromaddress 
        $message.To.Add($toaddress) 
        $message.IsBodyHtml = $True 
        $message.Subject = $Subject 
        $message.body = $body 
        $smtp = new-object Net.Mail.SmtpClient($smtpserver) 
        $smtp.Send($message) 
        $servercmd.Dispose()
        $servercon.Dispose()
    }
}
