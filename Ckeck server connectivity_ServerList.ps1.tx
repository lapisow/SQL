cls
 # Get-Date -Format 'yyyyMMddHHmmss' >C:\backups\TIMETXT.txt

        $return=@()
        
 

      # Write-Warning $servercmd.CommandText
        try
        {
             $serverNames = Get-Content ("C:\Users\Fikre.Kassa\Downloads\servername-SfdbiTrk_db.txt") 
    
            foreach($dbserver in $serverNames)
            {
               
                 
              Write-Host  $dbserver  # you can comment if you schedule this 

             
               $sqlcmd= "select @@servername as Servername,create_date, getdate() as checking_date from sys.databases where name = 'tempdb'"
               #$sqlcmd ="select @@servername as Servername,crdate as create_date, getdate() as checking_date from master.dbo.sysdatabases where name = 'tempdb'"
                #Invoke-Sqlcmd -ServerInstance $instance -Database tempdb -Query $sqlcmd -ErrorAction Stop -ConnectionTimeout 2



                  try{
                  $row = New-Object -TypeName Psobject -Property @{'InstanceName'=$dbserver; 'Startuptime' = $null;check_date=$null}
                  $check = Invoke-Sqlcmd -ServerInstance $dbserver -Database tempdb -Query $sqlcmd -ErrorAction Stop -ConnectionTimeout 0
                  $row.instancename =$check.Servername
                  $row.startuptime = $check.create_date
                  $row.check_date = $check.checking_date

                  }
                  catch {
                  # do nothing
                      try{
                      $sqlcmd ="select @@servername as Servername,crdate as create_date, getdate() as checking_date from master.dbo.sysdatabases where name = 'tempdb'"
                      $row = New-Object -TypeName Psobject -Property @{'InstanceName'=$dbserver; 'Startuptime' = $null;check_date=$null}
                      $check = Invoke-Sqlcmd -ServerInstance $dbserver -Database tempdb -Query $sqlcmd -ErrorAction Stop -ConnectionTimeout 0
                      $row.instancename =$check.Servername
                      $row.startuptime = $check.create_date
                      $row.check_date = $check.checking_date
                  
                      }
                      catch {
                       # do nothing
                       <#$ps= New-PSSession -ComputerName  "SWBC-EFTPROD01"
                       Enter-PSSession -session $ps
                        $dbserver ="SWBC-EFTPROD01\GLOBALSCAPE"
                        $sqlcmd= "select @@servername as Servername,create_date, getdate() as checking_date from sys.databases where name = 'tempdb'"
                      $check = Invoke-Sqlcmd -ServerInstance $dbserver -Database tempdb -Query $sqlcmd -ErrorAction Stop -ConnectionTimeout 0
                      $row.instancename =$check.Servername
                      $row.startuptime = $check.create_date
                      $row.check_date = $check.checking_date
                       Exist-PSSession  $ps
                       #>
                       Write-Warning " server $dbserver  " >>C:\Users\Fikre.Kassa\Downloads\ServerListProdnotyet.txt
                        continue
                       }
                   
                  }
                  finally {
                  $return+= $row 
                  }

              }
        }
        catch
        {
            Write-Warning "Read-Servers Error " #>>"D:\Replication_MAP\Error_log_SQL_JOBNew.txt"
             $ex = $_.Exception 
           Write-Error "$ex.Message" 
           continue 
           # Write-Warning $_
        }
        finally
        {
        
       # CLS
        $dd = Get-Date -Format 'yyyymmddHHMMss'
        #$dd

        
       $fileatt ="S:\MSSQL_SYS\MSSQL13.MSSQLSERVER\MSSQL\Log\connection$dd.html" 



       $return| ConvertTo-HTML | Out-File $fileatt 
       #$statusmessage= $return |Export-Clixml -Path $fileatt
       $att = new-object Net.Mail.Attachment($fileatt)

       # Send-MailMessage -SmtpServer "smtp.swbc.local" -To "fkassa@swbc.com" -From "statusofServert@swbc.com" -Subject "List of server allows connection" -Priority High -Body $att -BodyAsHtml
        
        
            $fromaddress = "status@swbc.com" 
            $toaddress = "fkassa@swbc.com"  # you can put your e-mail here 
            #$bccaddress = "test1.test1@swbc.com" 
            #$CCaddress = "test2.test2@swbc.com" 
            $Subject = "Server Status " 
            $body = get-content  $fileatt 
            #attachment =  $fileatt 
            $smtpserver = "smtp.swbc.local" 
 
            #################################### 
 
            $message = new-object System.Net.Mail.MailMessage 
            $message.From = $fromaddress 
            $message.To.Add($toaddress) 
            #$message.CC.Add($CCaddress) 
            #$message.Bcc.Add($bccaddress) 
            $message.IsBodyHtml = $True 
            $message.Subject = $Subject 
            #$attach = new-object Net.Mail.Attachment($fileatt) 
            #$message.Attachments.Add($attach) 
            $message.body = $body 
            $smtp = new-object Net.Mail.SmtpClient($smtpserver) 
            $smtp.Send($message) 
           # Get-Date -Format 'yyyyMMddHHmmss' >>C:\backups\TIMETXT.txt
      #-----------------------------------------
            $servercmd.Dispose()
            $servercon.Dispose()

        }
        