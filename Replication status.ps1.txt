cls
 # Get-Date -Format 'yyyyMMddHHmmss' >C:\backups\TIMETXT.txt
  Get-Date -Format 'yyyyMMddHHmmss' >>S:\MSSQL_SYS\MSSQL13.MSSQLSERVER\MSSQL\Log\TIMETXT.txt
 $sqlcmd ="if (object_id(N'tempdb.dbo.#tmp_publication') is not null)
drop table #tmp_publication
    
CREATE TABLE #tmp_publication(
	[publication_server] [nvarchar](128) NULL,
	[publication_database] [nvarchar](128) NULL,
	[publication_name] [sysname] NOT NULL,
	[publication_table] [sysname] NOT NULL,
    [Pub_active_1_inactive_0] [nvarchar](128) NULL,
	[subscriber_server] [sysname] NOT NULL,
	[subscriber_database] [sysname] NOT NULL,
	[subscriber_table] [sysname] NOT NULL,

	[sub_active_2_inactive_0] [nvarchar](128) NULL
	
)

exec sp_MSforeachdb ' use [?]

  
   declare @is_published sysname
  select @is_published=is_published  from sys.databases
  where name =db_name()

  if (@is_published =1) and (object_id(N''dbo.syssubscriptions'') is not null)
  begin 
	  insert into #tmp_publication
	  SELECT @@SERVERNAME as [publication_server]
	  ,db_name() as [publication_database]
	  ,pub.[name] as [publication_name]
	  ,artv.[name] as [publication_table]

	  , case
        when pub.[status] =0 then ''Inactive''
        when pub.[status] =1 then ''Active''
       end as [pub_active_1_inactive_0]
        
	  ,sub.srvname as [subscriber_server]
	  ,sub.dest_db as [subscriber_database]
	  ,artv.dest_table as [subscriber_table]
	  	
	,case 
        when sub.[status] =0 Then ''Inactive'' 
        when sub.[status] =1 then ''Subscribed'' 
        when sub.[status] =2 then ''Active''
      end as [sub_active_2_inactive_0]
	
	
FROM dbo.syssubscriptions sub
JOIN dbo.sysextendedarticlesview artv ON sub.artid = artv.artid
JOIN dbo.syspublications pub ON artv.pubid = pub.pubid
WHERE sub.srvid > 0
and (sub.[status] != 2 or pub.[status] !=1)
end
'
select * from #tmp_publication
"








        $return=@()
        
        $servercon = New-Object System.Data.SqlClient.SqlConnection
        $servercon.ConnectionString = "Data Source=P-DBAU1-V;Initial Catalog=master;Integrated Security=true;"
        $servercmd = New-Object System.Data.SqlClient.SqlCommand
        $servercmd.Connection = $servercon
        #$servercmd.CommandText = "SELECT top 10 InstanceName FROM DBA.dbo.view_SQLServerInstances where Environment ='QA' AND State = 'Running'"
        $servercmd.CommandText = "SELECT distinct  vw.[InstanceName] FROM [DBA].[dbo].[view_SQLServerInstances] vw
                                  where vw.Started ='True'	
                                  AND vw.[StartMode] !='Disabled'
                                  AND vw.State ='Running'
                                  and vw.Environment ='Prod'
                                 -- AND vw.[InstanceName] ='p-dbdt3'
                                  and vw.ServerName not  in  (
                                                   SELECT   dc.[Decom_servers]
                                                  FROM [DBAutil].[dbo].[Decommission_server_List] dc)
                                 --and  vw.[InstanceName] not in ('SWBC-TRAINCOG', 'SWBC-TRAINCPI','SWBC-TRAINMTG')  
                                               Order by  vw.[InstanceName];
                               "
        $servercmd.CommandTimeout = 0
        
      # Write-Warning $servercmd.CommandText
        try
        {
            $servercon.Open()
       
                $read = $servercmd.ExecuteReader()
    
            while ($read.Read())
            {
                $dbserver = $read["InstanceName"]
                 
              #Write-Host  $dbserver  # you can comment if you schedule this 

             
                 # $dbserver ="p-dbdt1-v"
              

                  try{
                     $checkRepl = Invoke-Sqlcmd -ServerInstance $dbserver -Database master -Query $sqlcmd -ErrorAction Stop -ConnectionTimeout 0
                        
                        

                        if($checkRepl){
                         $i=$checkRepl.Count
                         Write-warning " $dbserver           #articles inactive        $i"                        
                          
                          
                          for ($k =0; $k -lt $i; $k++){

                          $return += $checkRepl[$k]
     
                          }
                           
                          }
                          else {
                            Write-Host " $dbserver  #articles inactive 0" 
                           }
                  }
                  catch {
                  # do nothing
                        Write-Warning " server $dbserver unable to connect  "
                        continue
                   
                   
                  }
                  finally {
                  #$return+= $row 
                  }

              }
        }
        catch
        {
            Write-Warning "Read-Servers Error " #>>"D:\Replication_MAP\Error_log_SQL_JOBNew.txt"
             $ex = $_.Exception 
           Write-Error "$ex.Message" 
           continue 
           # Write-Warning $_
        }
        finally
        {
        
       # CLS
        $dd = Get-Date -Format 'yyyymmddHHMMss'
        #$dd

        
      # $fileatt ="c:\backups\connection$dd.html" 
      $fileatt ="S:\MSSQL_SYS\MSSQL13.MSSQLSERVER\MSSQL\Log\connection$dd.html" 


      $return|Select-Object publication_server,publication_database,publication_name,publication_table,Pub_active_1_inactive_0,subscriber_server,subscriber_database,subscriber_table,sub_active_2_inactive_0  |ConvertTo-HTML | Out-File $fileatt 
       
       #$statusmessage= $return |Export-Clixml -Path $fileatt
       $att = new-object Net.Mail.Attachment($fileatt)

       # Send-MailMessage -SmtpServer "smtp.swbc.local" -To "fkassa@swbc.com" -From "statusofServert@swbc.com" -Subject "List of server allows connection" -Priority High -Body $att -BodyAsHtml
        
        
            $fromaddress = "DBASupport@swbc.com" 
            $toaddress = "fkassa@swbc.com"  # you can put your e-mail here 
            #$bccaddress = "test1.test1@swbc.com" 
            #$CCaddress = "test2.test2@swbc.com" 
            $Subject = "Replication Status " 
            $body = get-content  $fileatt 
            #attachment =  $fileatt 
            $smtpserver = "smtp.swbc.local" 
 
            #################################### 
 
            $message = new-object System.Net.Mail.MailMessage 
            $message.From = $fromaddress 
            $message.To.Add($toaddress) 
            #$message.CC.Add($CCaddress) 
            #$message.Bcc.Add($bccaddress) 
            $message.IsBodyHtml = $True 
            $message.Subject = $Subject 
            #$attach = new-object Net.Mail.Attachment($fileatt) 
            #$message.Attachments.Add($attach) 
            $message.body = $body 
            $smtp = new-object Net.Mail.SmtpClient($smtpserver) 
            $smtp.Send($message) 
            #Get-Date -Format 'yyyyMMddHHmmss' >>C:\backups\TIMETXT.txt
            Get-Date -Format 'yyyyMMddHHmmss' >>S:\MSSQL_SYS\MSSQL13.MSSQLSERVER\MSSQL\Log\TIMETXT.txt
      #-----------------------------------------
            $servercmd.Dispose()
            $servercon.Dispose()

        }
        