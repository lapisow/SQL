
$scriptblk_TLS12={
param (
[string]$dbserver
)

	$array = @()
    $Tls12 =@()
    $ourObject = New-Object -TypeName psobject 

    #Define the variable to hold the location of Currently Installed Programs
    $UninstallKey="SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall" 
    #Create an instance of the Registry Object and open the HKLM base key
    $reg=[microsoft.win32.registrykey]::OpenRemoteBaseKey('LocalMachine', $env:COMPUTERNAME) 
    #Drill down into the Uninstall key using the OpenSubKey Method
    $regkey=$reg.OpenSubKey($UninstallKey) 
    #Retrieve an array of string that contain all the subkey names
    $subkeys=$regkey.GetSubKeyNames()
    #Open each Subkey and use GetValue Method to return the required values for each
    foreach ($key in $subkeys)
    {
        $thisKey=$UninstallKey+"\\"+$key 
        $thisSubKey=$reg.OpenSubKey($thisKey) 
        $obj = New-Object PSObject
        $obj | Add-Member -MemberType NoteProperty -Name "ComputerName" -Value $env:COMPUTERNAME
        $obj | Add-Member -MemberType NoteProperty -Name "DisplayName" -Value $($thisSubKey.GetValue("DisplayName"))
        $obj | Add-Member -MemberType NoteProperty -Name "DisplayVersion" -Value $($thisSubKey.GetValue("DisplayVersion"))
        $obj | Add-Member -MemberType NoteProperty -Name "InstallLocation" -Value $($thisSubKey.GetValue("InstallLocation"))
        $obj | Add-Member -MemberType NoteProperty -Name "Publisher" -Value $($thisSubKey.GetValue("Publisher"))
        $array += $obj
    } 
    #return $array
  $sqlodbc= $array | Where-Object {$_.DisplayName -like "*ODBC*" -and $_.Publisher -like "*Microsoft*"} | Select DisplayName,DisplayVersion
  $sqlncli =$array| Where-Object {$_.DisplayName -like "*Native Client*" -and $_.Publisher -like "*Microsoft*"} | Select DisplayName,DisplayVersion
  $sqleng =$array| Where-Object {$_.DisplayName -like "*Database Engine Services*" -and $_.Publisher -like "*Microsoft*"} | Select DisplayName,DisplayVersion

   
   if($sqlncli)
     {

       foreach ($cli in $sqlncli)
        {
            # SQL Server 2012 and 2014
            if ($cli.DisplayVersion.Split(".")[2] -lt 6538 -and $cli.DisplayVersion.Split(".")[0] -eq 11)
            {
                #Write-Host $cli.DisplayName "with version" $cli.DisplayVersion " needs to be updated to use TLS 1.2" -ForegroundColor Red
                $objtlscli = New-Object PSObject
                $objtlscli | Add-Member -MemberType NoteProperty -Name "ComputerName" -Value $env:COMPUTERNAME
                $objtlscli | Add-Member -MemberType NoteProperty -Name "DisplayName" -Value $cli.DisplayName
                $objtlscli | Add-Member -MemberType NoteProperty -Name "DisplayVersion" -Value $cli.DisplayVersion
                $objtlscli | Add-Member -MemberType NoteProperty -Name "TLS12_Status" -Value "needs to be updated to use TLS 1.2"
       
     
            }
            # SQL Server 2008
            elseif ($cli.DisplayVersion.Split(".")[2] -lt 6543  -and $cli.DisplayVersion.Split(".")[1] -eq 0 -and $cli.DisplayVersion.Split(".")[0] -eq 10) 
            {
               # Write-Host $cli.DisplayName "with version" $cli.DisplayVersion " needs to be updated to use TLS 1.2" -ForegroundColor Red
          
                $objtlscli = New-Object PSObject
                $objtlscli | Add-Member -MemberType NoteProperty -Name "ComputerName" -Value $env:COMPUTERNAME
                $objtlscli | Add-Member -MemberType NoteProperty -Name "DisplayName" -Value $cli.DisplayName
                $objtlscli | Add-Member -MemberType NoteProperty -Name "DisplayVersion" -Value $cli.DisplayVersion
                $objtlscli | Add-Member -MemberType NoteProperty -Name "TLS12_Status" -Value "needs to be updated to use TLS 1.2"
           
     
            }
            # SQL Server 2008 R2
            elseif ($cli.DisplayVersion.Split(".")[2] -lt 6537 -and ($cli.DisplayVersion.Split(".")[1] -eq 50 -or $cli.DisplayVersion.Split(".")[1] -eq 51 -or $cli.DisplayVersion.Split(".")[1] -eq 53) -and $cli.DisplayVersion.Split(".")[0] -eq 10)
            {
              #  Write-Host $cli.DisplayName "with version" $cli.DisplayVersion " needs to be updated to use TLS 1.2" -ForegroundColor Red
         
                $objtlscli = New-Object PSObject
                $objtlscli | Add-Member -MemberType NoteProperty -Name "ComputerName" -Value $env:COMPUTERNAME
                $objtlscli | Add-Member -MemberType NoteProperty -Name "DisplayName" -Value $cli.DisplayName
                $objtlscli | Add-Member -MemberType NoteProperty -Name "DisplayVersion" -Value $cli.DisplayVersion
                $objtlscli | Add-Member -MemberType NoteProperty -Name "TLS12_Status" -Value "needs to be updated to use TLS 1.2"
           
            }
            else
            {
                #Write-Host $cli.DisplayName "with version" $cli.DisplayVersion " supports TLS 1.2" -ForegroundColor Green
          
                $objtlscli = New-Object PSObject
                $objtlscli | Add-Member -MemberType NoteProperty -Name "ComputerName" -Value $env:COMPUTERNAME
                $objtlscli | Add-Member -MemberType NoteProperty -Name "DisplayName" -Value $cli.DisplayName
                $objtlscli | Add-Member -MemberType NoteProperty -Name "DisplayVersion" -Value $cli.DisplayVersion
                $objtlscli | Add-Member -MemberType NoteProperty -Name "TLS12_Status" -Value "supports TLS 1.2"
          }

             $Tls12 +=$objtlscli
           }
     }

     
     if($sqlodbc)
       {

    foreach ($cli in $sqlodbc)
        {
            # SQL Server 2012 and 2014
            if ($cli.DisplayVersion.Split(".")[2] -lt 4219 -and $cli.DisplayVersion.Split(".")[0] -eq 12)
            {
                #Write-Host $cli.DisplayName "with version" $cli.DisplayVersion " needs to be updated to use TLS 1.2" -ForegroundColor Red
                $objtlsodbc = New-Object PSObject
                $objtlsodbc | Add-Member -MemberType NoteProperty -Name "ComputerName" -Value $env:COMPUTERNAME
                $objtlsodbc | Add-Member -MemberType NoteProperty -Name "DisplayName" -Value $cli.DisplayName
                $objtlsodbc | Add-Member -MemberType NoteProperty -Name "DisplayVersion" -Value $cli.DisplayVersion
                $objtlsodbc | Add-Member -MemberType NoteProperty -Name "TLS12_Status" -Value "needs to be updated to use TLS 1.2"
               

            }
            else
            {
                #Write-Host $cli.DisplayName "with version" $cli.DisplayVersion " supports TLS 1.2" -ForegroundColor Green
                $objtlsodbc = New-Object PSObject
                $objtlsodbc | Add-Member -MemberType NoteProperty -Name "ComputerName" -Value $env:COMPUTERNAME
                $objtlsodbc | Add-Member -MemberType NoteProperty -Name "DisplayName" -Value $cli.DisplayName
                $objtlsodbc | Add-Member -MemberType NoteProperty -Name "DisplayVersion" -Value $cli.DisplayVersion
                $objtlsodbc | Add-Member -MemberType NoteProperty -Name "TLS12_Status" -Value "supports TLS 1.2"
               
            }
       
           

         $Tls12 +=$objtlsodbc

     
        }
     }


return $Tls12

} 

$dbservers =("swerver01","server02")
foreach($dbserver in $dbservers){
$result =$scrptblkresult= Invoke-Command -ComputerName $dbserver -ScriptBlock $scriptblk_TLS12 -ArgumentList $dbserver

  $dt=$result|select ComputerName, DisplayName, DisplayVersion, TLS12_Status 
}
