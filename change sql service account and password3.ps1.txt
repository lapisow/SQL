#  1. In order to ensure that the WMI provider works, which is what PowerShell (or other scripting languages) uses to control SQL Server, you first need to ensure that it has been compiled.  If you don’t, your objects will have null properties (bump I was referring to).  You only need to compile the provider once on the server.  To compile it type this from an administrator prompt:



mofcomp “C:\Program Files (x86)\Microsoft SQL Server\110\Shared\sqlmgmproviderxpsp2up.mof”

# 2. ensure that you allow PowerShell to run unsigned scripts locally (remote requires signed
 #Set-ExecutionPolicy -ExecutionPolicy RemoteSigned






 
function PowerShell-Wait($seconds)
{
#This function will cause the script to wait n seconds
   [System.Threading.Thread]::Sleep($seconds*1000)
}
##-----------------------------
 
 function  Change_account{
     Param(
             [string]$ServerName
            ,[string]$SQLServiceAccount
            ,[string]$SQLServicePasswd
            ,[string]$SQLService
          
            
               
                    
       )
Process 
{
write-host " Change_account" -foregroundcolor "white" -BackgroundColor "darkgreen"

 #3 To enumerate SQL related services on the box, you can create a script with these commands:

 try
 {
 [reflection.assembly]::LoadWithPartialName(“Microsoft.SqlServer.SqlWmiManagement”) | Out-Null
   $mc = new-object Microsoft.SQLServer.Management.SMO.WMI.ManagedComputer $ServerName
  

   write-host "display instance  "
                $ServerName
                $SQLServiceAccount
                $SQLServicePasswd
                $SQLService
       $servicea = $mc.Services[$SQLService]

        

       write-host "---instance ----  " -foregroundcolor "red" -BackgroundColor "white"
       #$servicea
       $servicea|select  DisplayName ,ServiceAccount,ServiceState

        write-host "changing the account and password  $SQLService "
       $servicea.SetServiceAccount($SQLServiceAccount,"$SQLServicePasswd")
       
        write-host "Altering the service   $SQLService "
       $servicea.Alter()
         write-host "start the service   $SQLService "
          PowerShell-Wait (5)
       $servicea.Start() 

       PowerShell-Wait (10)
        write-host "chicking  the service status    $SQLService "
         $mc = new-object Microsoft.SQLServer.Management.SMO.WMI.ManagedComputer $ServerName
      $servicea = $mc.Services[$SQLService]
     $servicea|select  DisplayName ,ServiceAccount,ServiceState
   }
catch
{
        write-host " error on changing account  or starting $SQLService" -foregroundcolor "white" -BackgroundColor "darkgreen"
         Write-Warning $_
             $err = $Error[0].Exception ;
         write-host  "Error caught:"  + ' Unable to change the server account:' + $SQLService  
        ##
           $err.Message  ;
          continue ;
             
        }
    finally
        {

        write-host " changing account  or starting completed $SQLService"
         # $mc.Dispose()
            
        }


} # end of processes 

} #end of change-account 






   ##-----------------------------

Function Get-ServiceAccountParams {
    Param(
    [string]$configserver
    )
    Process
    {
     write-host " Get-ServiceAccount from the database server" -foregroundcolor "white" -BackgroundColor "darkgreen"

        $srvlist_con = New-Object System.Data.SqlClient.SqlConnection
        $srvlist_con.ConnectionString = "Data Source=$configserver;Initial Catalog=DBAutil;Integrated Security=true;"
        
        $srvlist_cmd = New-Object System.Data.SqlClient.SqlCommand
        $srvlist_cmd.Connection = $srvlist_con
        $srvlist_cmd.CommandText = "SELECT  [ServerName]
                                          ,[SQLServiceAccount]
                                          ,[SQLServicePasswd]
                                          ,[SQLService]
                                      FROM [DBAutil].[dbo].[ServiceAccount] 
                                      -- where [ServerName] = 'D-DBUTIL2'  
                                       order by [ServerName] desc,[SQLService] "
        $srvlist_cmd.CommandTimeout = 0
       # write-host " Get-ServiceAccountParams befor try" -foregroundcolor "white" -BackgroundColor "darkgreen"
       

        try
        {
            $srvlist_con.Open()
            $getserverfromlist = $srvlist_cmd.ExecuteReader()
    
            while ($getserverfromlist.Read())
            {
                $ServerName = $getserverfromlist["ServerName"]
                $SQLServiceAccount = $getserverfromlist[“SQLServiceAccount"]
                $SQLServicePasswd = $getserverfromlist[“SQLServicePasswd"]
                $SQLService = $getserverfromlist["SQLService"]
                

                write-host " Account and password list" -foregroundcolor "white" -BackgroundColor "darkgreen"
                
                $ServerName 
                $SQLServiceAccount
                $SQLServicePasswd 
                $SQLService 
             

               #write-host " Get-ServiceAccountParams after the list" -foregroundcolor "white" -BackgroundColor "darkgreen"
               
               
            if ($SQLServiceAccount -and $SQLServicePasswd)
              {

              write-host " call change-account  function"
              Change_account  -ServerName  $ServerName  –SQLServiceAccount $SQLServiceAccount -SQLServicePasswd  $SQLServicePasswd -SQLService $SQLService    
              
       
                         
               
                }
                else {

                Write-Host " Account or password empty"
                }           
          

           write-host " return after call change-account  function" -foregroundcolor "white" -BackgroundColor "darkgreen"
            
            }
        }
        catch
        {
        write-host " Get-ServiceAccountParams" -foregroundcolor "white" -BackgroundColor "darkgreen"
            Write-Warning "Get-ServiceAccountParams"
            Write-Warning $_
        }
        finally
        {
            $srvlist_cmd.Dispose()
            $srvlist_con.Dispose()
        }
    }
}




CLS
 Get-ServiceAccountParams -configserver "IT-MG72891"

 # Get-ServiceAccountParams -configserver "P-DBAU1-V"









