
Import-Module sqlps
####################### 

function Invoke-Sqlcmd2 
{ 
    [CmdletBinding()] 
    param( 
    [Parameter(Position=0, Mandatory=$true)] [string]$ServerInstance, 
    [Parameter(Position=1, Mandatory=$false)] [string]$Database, 
    [Parameter(Position=2, Mandatory=$false)] [string]$Query, 
    [Parameter(Position=3, Mandatory=$false)] [string]$Username, 
    [Parameter(Position=4, Mandatory=$false)] [string]$Password, 
    [Parameter(Position=5, Mandatory=$false)] [Int32]$QueryTimeout=600, 
    [Parameter(Position=6, Mandatory=$false)] [Int32]$ConnectionTimeout=15, 
    [Parameter(Position=7, Mandatory=$false)] [ValidateScript({test-path $_})] [string]$InputFile, 
    [Parameter(Position=8, Mandatory=$false)] [ValidateSet("DataSet", "DataTable", "DataRow")] [string]$As="DataRow" 
    ) 
 
    if ($InputFile) 
    { 
        $filePath = $(resolve-path $InputFile).path 
        $Query =  [System.IO.File]::ReadAllText("$filePath") 
    } 
 
    $conn=new-object System.Data.SqlClient.SQLConnection 
      
    if ($Username) 
    { $ConnectionString = "Server={0};Database={1};User ID={2};Password={3};Trusted_Connection=False;Connect Timeout={4}" -f $ServerInstance,$Database,$Username,$Password,$ConnectionTimeout } 
    else 
    { $ConnectionString = "Server={0};Database={1};Integrated Security=True;Connect Timeout={2}" -f $ServerInstance,$Database,$ConnectionTimeout } 
 
    $conn.ConnectionString=$ConnectionString 
     
    #Following EventHandler is used for PRINT and RAISERROR T-SQL statements. Executed when -Verbose parameter specified by caller 
   <# if ($PSBoundParameters.Verbose) 
    { 
        $conn.FireInfoMessageEventOnUserErrors=$true 
        $handler = [System.Data.SqlClient.SqlInfoMessageEventHandler] {Write-Verbose "$($_)"} 
        $conn.add_InfoMessage($handler) 
    } #>
  try {

    $conn.Open() 
    $cmd=new-object system.Data.SqlClient.SqlCommand($Query,$conn) 
    $cmd.CommandTimeout=$QueryTimeout 
    $ds=New-Object system.Data.DataSet 
    $da=New-Object system.Data.SqlClient.SqlDataAdapter($cmd) 
      Get-Date >>"S:\MSSQL_SYS\MSSQL13.MSSQLSERVER\MSSQL\Log\connected_JOBNew.txt" 
      $ServerInstance >>"S:\MSSQL_SYS\MSSQL13.MSSQLSERVER\MSSQL\Log\connected_JOBNew.txt" 
    [void]$da.fill($ds) 
    $conn.Close() 
    switch ($As) 
    { 
        'DataSet'   { Write-Output ($ds) } 
        'DataTable' { Write-Output ($ds.Tables) } 
        'DataRow'   { Write-Output ($ds.Tables[0]) } 
    } 
 }

catch {
        $err = $Error[0].Exception ;
        "Error caught:"  + ' Unable to connect to the server :' + $ServerInstance  >>"S:\MSSQL_SYS\MSSQL13.MSSQLSERVER\MSSQL\Log\Error_log_SQL_JOBNew.txt"
        ##>>C:\Users\Fikre.Kassa\powershell\SQL\Error_log_SQL_JOB.txt
        ##>>S:\MSSQL_SYS\MSSQL13.MSSQLSERVER\MSSQL\Log\Error_log_Beta_QA_Dev.txt
        $err.Message  >>"S:\MSSQL_SYS\MSSQL13.MSSQLSERVER\MSSQL\Log\Error_log_SQL_JOBNew.txt" ;
        continue ;
}
} 
#Invoke-Sqlcmd2------------------------------------------



####################### 

function Write-DataTable 
{ 
    [CmdletBinding()] 
    param( 
    [Parameter(Position=0, Mandatory=$true)] [string]$ServerInstance, 
    [Parameter(Position=1, Mandatory=$true)] [string]$Database, 
    [Parameter(Position=2, Mandatory=$true)] [string]$TableName, 
    [Parameter(Position=3, Mandatory=$true)] $Data, 
    [Parameter(Position=4, Mandatory=$false)] [string]$Username, 
    [Parameter(Position=5, Mandatory=$false)] [string]$Password, 
    [Parameter(Position=6, Mandatory=$false)] [Int32]$BatchSize=50000, 
    [Parameter(Position=7, Mandatory=$false)] [Int32]$QueryTimeout=0, 
    [Parameter(Position=8, Mandatory=$false)] [Int32]$ConnectionTimeout=15 
    ) 
     
    $conn=new-object System.Data.SqlClient.SQLConnection 
 
    if ($Username) 
    { $ConnectionString = "Server={0};Database={1};User ID={2};Password={3};Trusted_Connection=False;Connect Timeout={4}" -f $ServerInstance,$Database,$Username,$Password,$ConnectionTimeout } 
    else 
    { $ConnectionString = "Server={0};Database={1};Integrated Security=True;Connect Timeout={2}" -f $ServerInstance,$Database,$ConnectionTimeout } 
 
    $conn.ConnectionString=$ConnectionString 
 
    try 
    { 
        $conn.Open() 
        $bulkCopy = new-object ("Data.SqlClient.SqlBulkCopy") $connectionString 
        $bulkCopy.DestinationTableName = $tableName 
        $bulkCopy.BatchSize = $BatchSize 
        $bulkCopy.BulkCopyTimeout = $QueryTimeOut 
        $bulkCopy.WriteToServer($Data) 
        $conn.Close() 
    } 
    catch 
    { 
        $ex = $_.Exception 
        Write-Error "$ex.Message" 
        continue 
    } 
 
} 
#Write-DataTable -----------------------

Get-Date >>"S:\MSSQL_SYS\MSSQL13.MSSQLSERVER\MSSQL\Log\Error_log_SQL_JOBNew.txt"
#$srvlist = @(get-content "S:\MSSQL_SYS\MSSQL13.MSSQLSERVER\MSSQL\Log\prod.txt")






        $servercon = New-Object System.Data.SqlClient.SqlConnection
        $servercon.ConnectionString = "Data Source=P-DBAU1-V;Initial Catalog=master;Integrated Security=true;"
        $servercmd = New-Object System.Data.SqlClient.SqlCommand
        $servercmd.Connection = $servercon
        #$servercmd.CommandText = "SELECT    [InstanceName]  FROM [DBA].[dbo].[view_SQLServerInstances] where State='Running'"

         $servercmd.CommandText = "SELECT distinct  vw.[InstanceName] FROM [DBA].[dbo].[view_SQLServerInstances] vw
                                  where vw.Started ='True'	
                                  AND vw.[StartMode] !='Disabled'
                                  AND vw.State ='Running'
                                  and vw.Environment ='PROD'
                                  --and vw.ServerName ='p-dbbi1-v'
                                  and vw.ServerName not  in  (
                                                   SELECT   dc.[Decom_servers]
                                                  FROM [DBAutil].[dbo].[Decommission_server_List] dc)
                                                  
                                
							Order by  vw.[InstanceName];
                               "



#$servercmd.CommandText = "SELECT  distinct  S.[INSTANCENAME]
 # FROM [DBA].[dbo].[Instance_sunday] S  JOIN [DBA].[dbo].[view_SQLServerInstances] V ON S.[INSTANCENAME] =v.[InstanceName]
  #WHERE s.state='Running'"



        $servercmd.CommandTimeout = 0
        
      # Write-Warning $servercmd.CommandText
        try
        {
            $servercon.Open()
       
                $read = $servercmd.ExecuteReader()
    
            while ($read.Read())
            {
                $dbserver = $read["InstanceName"]

              #  $dbserver ='P-DBAU1-V'

         Write-HOST  " read  $dbserver " 
           #  $dbserver >> "S:\MSSQL_SYS\MSSQL13.MSSQLSERVER\MSSQL\Log\listofServerNODE.csv" 

$dt = Invoke-Sqlcmd2 -ServerInstance $dbserver -Database master "


------------------------------------------------

USE [master]

IF OBJECT_ID('TEMPDB..#db_Autogrowth') IS NOT NULL
		DROP TABLE #db_Autogrowth


CREATE TABLE #db_Autogrowth(
	[svr_name] [nvarchar](128) NULL,
	[dbname] [sysname]  NULL,
	[db_fileName] [sysname]  NULL,
	[file_type] [nvarchar](60) NULL,
	[max_size] [int]  NULL,
	[max_size_desc] [varchar](30) NULL,
	[growth] [int]  NULL,
	[Autogrowth_by_MB_or_%] [int] NULL,
	[Autogrowth_desc] [varchar](17)  NULL,
	[CollactionDate] [datetime]  NULL default getdate(),
	[E_MAIL] [bit]  NULL default 0
)




Insert into  #db_Autogrowth(
      [svr_name]
      ,[dbname]
      ,[db_fileName]
      ,[file_type]
      ,[max_size]
      ,[max_size_desc]
      ,[growth]
      ,[Autogrowth_by_MB_or_%]
      ,[Autogrowth_desc]
)
 SELECT @@servername AS svr_name,
       d.name AS dbname,
       m.name db_fileName,
       CASE
           WHEN m.type_desc = 'ROWS'
           THEN 'DATA'
           ELSE m.type_desc
       END AS file_type,
       m.max_size,
       CASE
           WHEN(m.max_size = -1)
               OR (m.max_size = 268435456)
           THEN 'Unlimited'
           ELSE CAST(m.max_size AS VARCHAR)
       END AS max_size_desc,
       growth,
       CASE
           WHEN m.is_percent_growth = 0
           THEN(growth / 128)
           ELSE growth
       END AS 'Autogrowth_by_MB_or_%',
       CASE
           WHEN m.is_percent_growth = 1
           THEN 'Growth by Percent'
           ELSE 'growth by zise'
       END AS Autogrowth_desc
     

FROM sys.databases d
     JOIN sys.master_files m ON d.database_id = m.database_id;



select * from #db_Autogrowth



"
  if ($dt) {

Write-DataTable -ServerInstance "P-DBAU1-V" –Database DBAutil –TableName "db_Autogrowth" -Data $dt
}

        }
        }
        catch
        {
            Write-Warning "Read-Servers Error2 " >>"S:\MSSQL_SYS\MSSQL13.MSSQLSERVER\MSSQL\Log\Error_log_SQL_JOBNew.txt"
           Write-Warning $_
        }
        finally
        {
            $servercmd.Dispose()
            $servercon.Dispose()
        }
        

