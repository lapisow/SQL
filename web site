[int]$debug =1
$ErrorActionPreference  ="continue"
## The URI list to test
#$URLListFile = "c:\backups\URLList.txt" 
#$URLList = Get-Content $URLListFile -ErrorAction SilentlyContinue
$ErrorActionPreferenceOld =$ErrorActionPreference
$ErrorActionPreference ="Silentlycontinue" 
$URLList =("http://www.XXX.com/","https://XXX.com/","https://XXX.com/","http://XX.com/")  
$Result = @()   
[int]$email  = 0  
[int]$Reboot = 0     
Foreach($Uri in $URLList) {         
$time = try{         
    $request = $null          
    ## Request the URI, and measure how long the response took.         
    $result1 = Measure-Command { $request = Invoke-WebRequest -Uri $uri -UseBasicParsing}          
    $result1.TotalMilliseconds          }          
    catch          {           
    <# If the request generated an exception (i.e.: 500 server           
    error or 404 not found), we can pull the status code from the           Exception.Response property 
    #>           
    $request = $_.Exception.Response           
    r
    $_.Exception           $time = -1         
    }                
    if($debug -eq 1) { Write-Host $request.StatusCode ,$request.StatusDescription;}       
    $result += [PSCustomObject] @{      
       Time = Get-Date;      
       Uri = $uri;      
       StatusCode = [int] $requebalfoust.StatusCode;      
       StatusDescription = $request.StatusDescription;     
       ResponseLength = $request.RawContentLength;      
       TimeTaken =  $time;       
       }      
       }     
       if(($debug -eq 1) ) {
       Foreach($Entryx in $Result)    {      
       Write-Host $Entryx.StatusCode,$Entryx.StatusDescription;     }    }    
       #Prepare email body in HTML format
       if($result -ne $null){  
         $Outputreport = "<HTML><TITLE>Baxx Critical Websites Availability Report</TITLE><BODY background-color:peachpuff><font color =""#99000"" face=""Microsoft Tai le""><H2> Balfour_Website Availability Report </H2></font><Table border=1 cellpadding=0 cellspacing=0><TR bgcolor=gray align=center><TD><B>URL</B></TD><TD><B>StatusCode</B></TD><TD><B>StatusDescription</B></TD><TD><B>ResponseLength</B></TD><TD><B>TimeTaken</B></TD</TR>"    
         Foreach($Entry in $Result)    {
               if($Entry.StatusCode -ne "200")        {
                   $Outputreport += "<TR bgcolor=red>"            
                   $email=1            
                   if($Entry.Uri -eq "https://xxxxx.smart-xxxx.com/" ) {                    
                   $Reboot =1                
                   }        
                   }        
                   else        {            
                   $Outputreport += "<TR>"        
                   }        
                   $Outputreport += "<TD>$($Entry.uri)</TD><TD align=center>$($Entry.StatusCode)</TD><TD align=center>$($Entry.StatusDescription)</TD><TD align=center>$($Entry.ResponseLength)</TD><TD align=center>$($Entry.timetaken)</TD></TR>"    }    
                   $Outputreport += "</Table></BODY></HTML>"}  
                   If ($Reboot -eq 1){    
                   $Outputreport += " "    
                   $Outputreport += "Critical issues has been detected on https://XXXX.com/Automated and corrective action will be taken momentarily....If the issue continue more than 15 minutes, please call to XXXXXXX." } 
         If ($email -eq 1){             
           $fromaddress = "XX@baxx.com"            
       #$toaddress = "XX@baxx.com, XX@baxx.com, XX@baxx.com"             $toaddress = "Zelalem.kassa@baxx.com"            $bccaddress = "XX@hotmail.com"            #$CCaddress = "XX@baxx.com"            
       #$CCaddress = "XX@baxx.com"             
       $CCaddress = "XX@baxx.com"            
       $Subject = "Balfour Critical Website Availability Status Report "            
       $body = $Outputreport      
       
       #attachment =  $fileatt            
       $smtpserver = "mail.XXXXX.com"             
       ####################################            
       $message = new-object System.Ne$LastBootUpTime=gwmi -class win32_operatingsystem   | Select-Object @{label='LastRestart';expression={$_.ConvertToDateTime($_.LastBootUpTime)
       }
       }
       if ($LastBootUpTime.LastRestart -le (get-date).AddHours(-1)){      
           if(t.Mail.MailMessage            
       $message.From = $fromaddress            
       $message.To.Add($toaddress)            
       $message.CC.Add($CCaddress)            
       $message.Bcc.Add($bccaddress)            
       $message.IsBodyHtml = $True            
       $message.Subject = $Subject            
       #$attach = new-object Net.Mail.Attachment($fileatt)            
       #$message.Attachments.Add($attach)            
       $message.body = $body            
       $smtp = new-object Net.Mail.SmtpClient($smtpserver)            
       $smtp.Send($message) 
       } 
       If ($Reboot -eq 1){ 
         ($debug -eq 1) ) {    
            Get-Date    
            Start-Sleep -s 3    
         Write-Warning " Smart-pay web server correction action on progress....Recovery notification will send out soon"   
         Get-Date   
         }    
       #Restart-Computer -force
       Connect-VIServer -Server 10.81.50.69 -Protocol https -User updatemanage -Password XXXXXXX -WarningAction SilentlyContinue    
       restart-vm -vm DALW-ADM-MOM01 -Confirm:$false }
       }
